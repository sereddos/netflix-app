{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cubejsApi","cubejs","apiUrl","renderChart","Component","options","resultSet","error","toString","style","textAlign","paddingTop","numberFormatter","item","numeral","format","dateFormatter","moment","AppLayout","children","Header","Row","type","gutter","justify","Col","span","lg","color","theme","mode","lineHeight","display","justifyContent","Item","key","href","Content","padding","margin","Dashboard","onDateRangeChange","align","marginBottom","RangePicker","onChange","date","dateString","defaultValue","DashboardItem","title","size","height","defaultProps","numberRender","width","seriesNames","map","s","value","totalRow","colorsProduced","colorsGenres","colorsRating","pieRender","dataKey","colors","data","chartPivot","nameKey","label","entry","index","fill","length","verticalAlign","layout","areaRender","tickFormatter","labelFormatter","name","stroke","barRender","stackId","tableRender","pagination","columns","tableColumns","c","dataIndex","dataSource","tablePivot","App","props","state","cubePostFix","dateRange","setState","query","measures","this","timeDimensions","dimension","render","dimensions","filters","member","operator","order","limit","granularity","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2bA2BMA,E,MAAYC,GAFG,mIAEkB,CACtCC,OAJe,wCAOVC,EAAc,SAACC,GAAD,IAAYC,EAAZ,uDAAsB,GAAtB,OAA6B,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,MAAd,OAC9CD,GAAa,kBAACF,EAAD,eAAWE,UAAWA,GAAeD,KAClDE,GAASA,EAAMC,YAAe,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,WAAY,KAAM,kBAAC,IAAD,MAArD,OAE3BC,EAAkB,SAAAC,GAAI,OAAIC,IAAQD,GAAME,OAAO,QAC/CC,EAAgB,SAAAH,GAAI,OAAII,IAAOJ,GAAME,OAAO,WAE5CG,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAAC,IAAD,KACE,kBAAC,IAAOC,OAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,KAAK,OAAOC,OAAQ,GAAIC,QAAQ,iBACnC,kBAACC,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GACjB,wBAAIlB,MAAO,CAAEmB,MAAO,QAASjB,WAAY,SAAzC,4CAIF,kBAACc,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GACjB,kBAAC,IAAD,CACEE,MAAM,OACNC,KAAK,aACLrB,MAAO,CAAEsB,WAAY,OAAQC,QAAS,OAAQC,eAAgB,aAE9D,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,uBAAGC,KAAK,sCAAR,WAIF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,uBAAGC,KAAK,0BAAR,cASV,kBAAC,IAAOC,QAAR,CACE5B,MAAO,CACL6B,QAAS,mBACTC,OAAQ,SAGTpB,KAKDqB,EAAY,SAAC,GAAD,IAAGrB,EAAH,EAAGA,SAAUsB,EAAb,EAAaA,kBAAb,MAAqC,CACrD,kBAACpB,EAAA,EAAD,CACEC,KAAK,OACLE,QAAQ,eACRkB,MAAM,MACNnB,OAAQ,GACRd,MAAO,CACLkC,aAAc,KAGhB,kBAAClB,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAIe,MAAM,SAC3B,kBAAC,IAAWE,YAAZ,CACEC,SAAU,SAACC,EAAMC,GAAP,OAAsBN,EAAkBM,IAClDC,aAAc,CACZ/B,IAAO,aAAc,cACrBA,IAAO,aAAc,mBAK7B,kBAACI,EAAA,EAAD,CAAKC,KAAK,OAAOE,QAAQ,eAAekB,MAAM,MAAMnB,OAAQ,IACzDJ,KAIC8B,EAAgB,SAAC,GAAD,IAAG9B,EAAH,EAAGA,SAAU+B,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,OAA1B,OACpB,kBAAC3B,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAIwB,GACjB,kBAAC,IAAD,CACED,MAAOA,EACPzC,MAAO,CACLkC,aAAc,SAGhB,yBAAKlC,MAAO,CAAC2C,OAAQA,IAClBjC,MAMT8B,EAAcI,aAAe,CAC3BF,KAAM,IAGR,IAAMG,EAAe,SAAC,GAAD,IAAGhD,EAAH,EAAGA,UAAH,OACnB,kBAACe,EAAA,EAAD,CACEC,KAAK,OACLE,QAAQ,SACRkB,MAAM,SACNjC,MAAO,CACL8C,MAAO,SAGT,kBAAC9B,EAAA,EAAD,KACGnB,EAAUkD,cAAcC,KAAI,SAAAC,GAAC,OAC5B,kBAAC,IAAD,CAAWC,MAAOrD,EAAUsD,WAAWF,EAAEvB,aAM3C0B,EAAiB,CAAC,UAAW,UAAW,UAAW,WACnDC,EAAe,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAClFC,EAAe,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAClFC,EAAY,SAAC,GAAD,IAAG1D,EAAH,EAAGA,UAAW2D,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,OAAvB,OAChB,kBAAC,IAAD,CAAqBX,MAAM,OAAOH,OAAQ,KACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEe,KAAM7D,EAAU8D,aAChBC,QAAQ,WACRJ,QAASA,EACTK,OAAK,GAEJhE,EAAU8D,aAAaX,KAAI,SAACc,EAAOC,GAAR,OAC1B,kBAAC,IAAD,CAAMrC,IAAG,eAAUqC,GAASC,KAAMP,EAAOM,EAAQN,EAAOQ,cAG5D,kBAAC,IAAD,CAAQC,cAAc,SAASjC,MAAM,QAAQkC,OAAO,aACpD,kBAAC,IAAD,SAKAC,EAAa,SAAC,GAAD,IAAGvE,EAAH,EAAGA,UAAW2D,EAAd,EAAcA,QAAd,OACjB,kBAAC,IAAD,CAAqBV,MAAM,OAAOH,OAAQ,KACxC,kBAAC,IAAD,CAAWe,KAAM7D,EAAU8D,cACzB,kBAAC,IAAD,CAAOH,QAAQ,WAAWa,cAAe9D,IACzC,kBAAC,IAAD,CAAO8D,cAAelE,IACtB,kBAAC,IAAD,CAASmE,eAAgB/D,IACzB,kBAAC,IAAD,CACEM,KAAK,WACL2C,QAASA,EACTe,KAAK,cACLC,OAAO,qBACPR,KAAK,6BAEP,kBAAC,IAAD,CAAOR,QAAQ,OAAOb,OAAQ,GAAI6B,OAAO,eAKzCC,EAAY,SAAC,GAAD,IAAG5E,EAAH,EAAGA,UAAH,EAAc2D,QAAd,OAChB,kBAAC,IAAD,CAAqBV,MAAM,OAAOH,OAAQ,KACxC,kBAAC,IAAD,CAAUe,KAAM7D,EAAU8D,cACxB,kBAAC,IAAD,CAAOU,cAAe9D,EAAeiD,QAAQ,MAC7C,kBAAC,IAAD,CAAOa,cAAelE,IACtB,kBAAC,IAAD,CACEuE,QAAQ,IACRlB,QAAQ,uBACRe,KAAK,SACLP,KAAK,YAEP,kBAAC,IAAD,CACEU,QAAQ,IACRlB,QAAQ,yBACRe,KAAK,WACLP,KAAK,YAEP,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOR,QAAQ,OAAOb,OAAQ,GAAI6B,OAAO,YACzC,kBAAC,IAAD,CAASF,eAAgB/D,OAKzBoE,EAAc,SAAC,GAAD,IAAG9E,EAAH,EAAGA,UAAH,OAClB,kBAAC,IAAD,CAAqBiD,MAAM,QACzB,kBAAC,IAAD,CACE8B,YAAY,EACZC,QAAShF,EAAUiF,eAAe9B,KAAI,SAAA+B,GAAC,kCAAUA,GAAV,IAAaC,UAAWD,EAAErD,SACjEuD,WAAYpF,EAAUqF,iBAuNZC,E,kDAjNd,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,GACbC,UAAW,CAAC,aAAc,eAJX,E,qDAOT,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEvD,kBAAmB,SAAAuD,GAAS,OAC1B,EAAKC,SAAS,CACZD,UAAWA,MAIb,kBAAC,EAAD,CAAe9C,MAAM,sBAAsBC,KAAM,GAC/C,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,aAI5BhG,UAAWA,EACXuG,OAAQpG,EAAYmD,MAGxB,kBAAC,EAAD,CAAeJ,MAAM,mBAAmBC,KAAM,GAC5C,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,iBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,aAI5BhG,UAAWA,EACXuG,OAAQpG,EAAYmD,MAGxB,kBAAC,EAAD,CAAeJ,MAAM,iBAAiBC,KAAM,GAC1C,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,aAI5BhG,UAAWA,EACXuG,OAAQpG,EAAYmD,MAGxB,kBAAC,EAAD,CAAeJ,MAAM,4DAA4DC,KAAM,GACrF,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,YAG1BQ,WAAY,CAAC,UAAD,OAAWJ,KAAKN,MAAMC,YAAtB,aACZU,QAAS,CACP,CACEC,OAAO,UAAD,OAAYN,KAAKN,MAAMC,YAAvB,YACNY,SAAS,QAGbC,MAAO,CACL,qBAAsB,QAExBC,MAAO,IAET7G,UAAWA,EACXuG,OAAQpG,EAAY6D,EAAW,CAACC,QAAS,qBAAsBC,OAAQL,OAG3E,kBAAC,EAAD,CAAeX,MAAM,wBAAwBC,KAAM,GACjD,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,YAG1BQ,WAAY,CAAC,UAAD,OAAWJ,KAAKN,MAAMC,YAAtB,cACZU,QAAS,CACP,CACEC,OAAO,UAAD,OAAYN,KAAKN,MAAMC,YAAvB,aACNY,SAAS,QAGbC,MAAO,CACL,qBAAsB,QAExBC,MAAO,IAET7G,UAAWA,EACXuG,OAAQpG,EAAY6D,EAAW,CAACC,QAAS,qBAAsBC,OAAQJ,OAG3E,kBAAC,EAAD,CAAeZ,MAAM,qEAAqEC,KAAM,GAC9F,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OACEC,KAAKN,MAAMC,YADb,gCAEEK,KAAKN,MAAMC,YAFb,gCAGEK,KAAKN,MAAMC,YAHb,iBAKVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,YAG1BQ,WAAY,CAAC,UAAD,OAAWJ,KAAKN,MAAMC,YAAtB,aACZU,QAAS,CACP,CACEC,OAAO,UAAD,OAAYN,KAAKN,MAAMC,YAAvB,YACNY,SAAS,QAGbC,MAAO,CACL,qBAAsB,QAExBC,MAAO,GAET7G,UAAWA,EACXuG,OAAQpG,EAAYiF,MAGxB,kBAAC,EAAD,CAAelC,MAAM,sCAAsCC,KAAM,GAC/D,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,YAG1BQ,WAAY,CAAC,UAAD,OAAWJ,KAAKN,MAAMC,YAAtB,YACZU,QAAS,CACP,CACEC,OAAO,UAAD,OAAYN,KAAKN,MAAMC,YAAvB,WACNY,SAAS,QAGbC,MAAO,CACL,qBAAsB,QAExBC,MAAO,IAET7G,UAAWA,EACXuG,OAAQpG,EAAY6D,EAAW,CAACC,QAAS,qBAAsBC,OAAQH,OAG3E,kBAAC,EAAD,CAAeb,MAAM,yBAAyBC,KAAM,IAClD,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,gBACVM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,UACtBc,YAAa,WAInB9G,UAAWA,EACXuG,OAAQpG,EAAY0E,EAAY,CAACZ,QAAS,0BAG9C,kBAAC,EAAD,CAAef,MAAM,iCAAiCC,KAAM,IAC1D,kBAAC,IAAD,CACE+C,MAAO,CACLC,SAAU,CAAC,UAAD,OAAWC,KAAKN,MAAMC,YAAtB,WACVS,WAAY,CAAC,UAAD,OAAWJ,KAAKN,MAAMC,YAAtB,cACZM,eAAgB,CACd,CACEC,UAAU,UAAD,OAAYF,KAAKN,MAAMC,YAAvB,cACTC,UAAWI,KAAKN,MAAME,UACtBc,YAAa,WAInB9G,UAAWA,EACXuG,OAAQpG,EAAY+E,EAAW,CAACjB,QAAS,2B,GAzMvC8C,IAAM3G,WC1MJ4G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxH,GACLyH,QAAQzH,MAAMA,EAAM0H,c","file":"static/js/main.a27357dc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport \"antd/dist/antd.css\";\nimport { Table, DatePicker, Spin, Menu, Card, Layout, Statistic, } from \"antd\";\nimport {\n AreaChart,\n Area,\n XAxis,\n YAxis,\n Tooltip,\n ResponsiveContainer,\n PieChart, \n Pie,\n Legend,\n Cell,\n Bar,\n Brush,\n BarChart\n} from \"recharts\";\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport { QueryRenderer } from \"@cubejs-client/react\";\nimport cubejs from \"@cubejs-client/core\";\n\nconst API_URL = 'http://localhost:4000/cubejs-api/v1';\nconst CUBEJS_TOKEN = '6ad781833935efd8b7134e2e4e256cfb23ce1fca3de9034d642891d2b78a50f27d0e0d99e55c04233385a5d4c18e8a012349c5d0541c38d6b8da92aa9746e365';\n\nconst cubejsApi = cubejs(CUBEJS_TOKEN, {\n apiUrl: API_URL\n});\n\nconst renderChart = (Component, options = {}) => ({ resultSet, error }) =>\n  (resultSet && <Component resultSet={resultSet} {...options} />) ||\n  (error && error.toString()) || <div style={{ textAlign: \"center\", paddingTop: 30 }}><Spin /> </div>;\n\nconst numberFormatter = item => numeral(item).format(\"0,0\");\nconst dateFormatter = item => moment(item).format(\"MMM YY\");\n\nconst AppLayout = ({ children }) => (\n  <Layout>\n    <Layout.Header>\n      <Row type=\"flex\" gutter={24} justify=\"space-between\">\n        <Col span={24} lg={6}>\n          <h2 style={{ color: 'white', paddingTop: '10px' }}>\n            Movies and TV Shows Listings on Netflix\n          </h2>\n        </Col>\n        <Col span={24} lg={6}>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            style={{ lineHeight: '64px', display: 'flex', justifyContent: 'flex-end' }}\n          >\n            <Menu.Item key=\"1\">\n              <a href=\"https://github.com/cube-js/cube.js\">\n                Github\n              </a>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <a href=\"https://slack.cube.dev\">\n                Slack\n              </a>\n            </Menu.Item>\n          </Menu>\n        </Col>\n      </Row>\n      \n    </Layout.Header>\n    <Layout.Content\n      style={{\n        padding: \"0 25px 25px 25px\",\n        margin: \"25px\"\n      }}\n    >\n      {children}\n    </Layout.Content>\n  </Layout>\n);\n\nconst Dashboard = ({ children, onDateRangeChange }) => [\n  <Row\n    type=\"flex\"\n    justify=\"space-around\"\n    align=\"top\"\n    gutter={24}\n    style={{\n      marginBottom: 20\n    }}\n  >\n    <Col span={24} lg={12} align=\"right\">\n      <DatePicker.RangePicker\n        onChange={(date, dateString) => onDateRangeChange(dateString)}\n        defaultValue={[\n          moment(\"2008/01/01\", \"YYYY/MM/DD\"),\n          moment(\"2020/01/31\", \"YYYY/MM/DD\")\n        ]}\n      />\n    </Col>\n  </Row>,\n  <Row type=\"flex\" justify=\"space-around\" align=\"top\" gutter={24}>\n    {children}\n  </Row>\n];\n\nconst DashboardItem = ({ children, title, size, height }) => (\n  <Col span={24} lg={size}>\n    <Card\n      title={title}\n      style={{\n        marginBottom: \"24px\"\n      }}\n    >\n      <div style={{height: height}}>\n        {children}\n      </div>\n    </Card>\n  </Col>\n);\n\nDashboardItem.defaultProps = {\n  size: 12\n};\n\nconst numberRender = ({ resultSet }) => (\n  <Row\n    type=\"flex\"\n    justify=\"center\"\n    align=\"middle\"\n    style={{\n      width: \"100%\"\n    }}\n  >\n    <Col>\n      {resultSet.seriesNames().map(s => (\n        <Statistic value={resultSet.totalRow()[s.key]} />\n      ))}\n    </Col>\n  </Row>\n);\n\nconst colorsProduced = [\"#7DB3FF\", \"#49457B\", \"#FF7C78\", \"#FED3D0\"];\nconst colorsGenres = [\"#0088FE\", \"#00C49F\", \"#8884d8\", \"#83a6ed\", \"#8dd1e1\", \"#FFBB28\", \"#FF8042\"];\nconst colorsRating = [\"#8884d8\", \"#83a6ed\", \"#8dd1e1\", \"#82ca9d\", \"#a4de6c\", \"#d0ed57\", \"#ffc658\"];\nconst pieRender = ({ resultSet, dataKey, colors }) => (\n  <ResponsiveContainer width=\"100%\" height={350}>\n    <PieChart>\n      <Pie\n        data={resultSet.chartPivot()}\n        nameKey=\"category\"\n        dataKey={dataKey}\n        label\n      >\n        {resultSet.chartPivot().map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n        ))}\n      </Pie>\n      <Legend verticalAlign=\"middle\" align=\"right\" layout=\"vertical\" />\n      <Tooltip />\n    </PieChart>\n  </ResponsiveContainer>\n);\n\nconst areaRender = ({ resultSet, dataKey }) => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <AreaChart data={resultSet.chartPivot()}>\n      <XAxis dataKey=\"category\" tickFormatter={dateFormatter} />\n      <YAxis tickFormatter={numberFormatter} />\n      <Tooltip labelFormatter={dateFormatter} />\n      <Area\n        type=\"monotone\"\n        dataKey={dataKey}\n        name=\"Total Shows\"\n        stroke=\"rgb(106, 110, 229)\"\n        fill=\"rgba(106, 110, 229, .16)\"\n      />\n      <Brush dataKey=\"name\" height={30} stroke=\"#8884d8\" />\n    </AreaChart>\n  </ResponsiveContainer>\n);\n\nconst barRender = ({ resultSet, dataKey }) => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <BarChart data={resultSet.chartPivot()}>\n      <XAxis tickFormatter={dateFormatter} dataKey=\"x\" />\n      <YAxis tickFormatter={numberFormatter} />\n      <Bar\n        stackId=\"a\"\n        dataKey=\"Movie, Netflix.count\"\n        name=\"Movies\"\n        fill=\"#7DB3FF\"\n      />\n      <Bar\n        stackId=\"a\"\n        dataKey=\"TV Show, Netflix.count\"\n        name=\"TV Shows\"\n        fill=\"#49457B\"\n      />\n      <Legend />\n      <Brush dataKey=\"name\" height={30} stroke=\"#8884d8\" />\n      <Tooltip labelFormatter={dateFormatter} />\n    </BarChart>\n  </ResponsiveContainer>\n);\n\nconst tableRender = ({ resultSet }) => (\n  <ResponsiveContainer width=\"100%\">\n    <Table\n      pagination={false}\n      columns={resultSet.tableColumns().map(c => ({ ...c, dataIndex: c.key }))}\n      dataSource={resultSet.tablePivot()}\n    />\n  </ResponsiveContainer>\n);\n\nclass App extends React.Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      cubePostFix: \"\",\n      dateRange: [\"2008-01-01\", \"2020-01-31\"]\n    };\n  }\n  render() {\n    return (\n      <AppLayout>\n        <Dashboard\n          onDateRangeChange={dateRange =>\n            this.setState({\n              dateRange: dateRange\n            })\n          }\n        >\n            <DashboardItem title=\"Total Netflix Shows\" size={4}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.totalCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange\n                    }\n                  ]\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(numberRender)}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Netflix TV Shows\" size={4}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.tvShowCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange\n                    }\n                  ]\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(numberRender)}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Netflix Movies\" size={4}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.movieCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange\n                    }\n                  ]\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(numberRender)}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Top 15 countries where Netflix movies/shows were produced\" size={6}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.totalCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                    }\n                  ],\n                  dimensions: [`Netflix${this.state.cubePostFix}.country`],\n                  filters: [\n                    {\n                      member: `Netflix${this.state.cubePostFix}.country`,\n                      operator: `set`\n                    }\n                  ],\n                  order: {\n                    'Netflix.totalCount': 'desc'\n                  },\n                  limit: 15\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(pieRender, {dataKey: 'Netflix.totalCount', colors: colorsProduced})}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Top 15 Netflix genres\" size={6}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.totalCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                    }\n                  ],\n                  dimensions: [`Netflix${this.state.cubePostFix}.listedIn`],\n                  filters: [\n                    {\n                      member: `Netflix${this.state.cubePostFix}.listedIn`,\n                      operator: `set`\n                    }\n                  ],\n                  order: {\n                    'Netflix.totalCount': 'desc'\n                  },\n                  limit: 15\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(pieRender, {dataKey: 'Netflix.totalCount', colors: colorsGenres})}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Top 5 countries where Netflix movies/shows were produced (details)\" size={6}>\n              <QueryRenderer\n                query={{\n                  measures: [\n                    `Netflix${this.state.cubePostFix}.totalCount`,\n                    `Netflix${this.state.cubePostFix}.movieCount`,\n                    `Netflix${this.state.cubePostFix}.tvShowCount`\n                  ],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                    }\n                  ],\n                  dimensions: [`Netflix${this.state.cubePostFix}.country`],\n                  filters: [\n                    {\n                      member: `Netflix${this.state.cubePostFix}.country`,\n                      operator: `set`\n                    }\n                  ],\n                  order: {\n                    'Netflix.totalCount': 'desc'\n                  },\n                  limit: 5\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(tableRender)}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Netflix TV Rating of the movie/show\" size={6}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.totalCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                    }\n                  ],\n                  dimensions: [`Netflix${this.state.cubePostFix}.rating`],\n                  filters: [\n                    {\n                      member: `Netflix${this.state.cubePostFix}.rating`,\n                      operator: `set`\n                    }\n                  ],\n                  order: {\n                    'Netflix.totalCount': 'desc'\n                  },\n                  limit: 15\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(pieRender, {dataKey: 'Netflix.totalCount', colors: colorsRating})}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Netflix Shows Timeline\" size={12}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.totalCount`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                      granularity: \"month\"\n                    }\n                  ]\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(areaRender, {dataKey: 'Netflix.totalCount'})}\n              />\n            </DashboardItem>\n            <DashboardItem title=\"Netflix Shows by Type Timeline\" size={12}>\n              <QueryRenderer\n                query={{\n                  measures: [`Netflix${this.state.cubePostFix}.count`],\n                  dimensions: [`Netflix${this.state.cubePostFix}.showType`],\n                  timeDimensions: [\n                    {\n                      dimension: `Netflix${this.state.cubePostFix}.dateAdded`,\n                      dateRange: this.state.dateRange,\n                      granularity: \"month\"\n                    }\n                  ]\n                }}\n                cubejsApi={cubejsApi}\n                render={renderChart(barRender, {dataKey: 'Netflix.count'})}\n              />\n            </DashboardItem>\n        </Dashboard>\n      </AppLayout>\n    );\n  }\n }\n \n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}